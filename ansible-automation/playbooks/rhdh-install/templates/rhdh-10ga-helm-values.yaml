global:
  clusterRouterBase: '{{ apps_cluster_domain }}'
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      # Group: Github
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic
        disabled: false
        # pluginConfig:
        #   catalog:
        #     providers:
        #       github:
        #         providerId:
        #           organization: "${GITHUB_ORG}"
        #           schedule:
        #             frequency:
        #               minutes: 1
        #             timeout: 
        #               minutes: 1
        #             initialDelay:
        #               seconds: 15
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-org-dynamic
        disabled: false
        # pluginConfig:
        #   catalog:
        #     providers:
        #       githubOrg:
        #         default:
        #           id: production
        #           orgUrl: "${GITHUB_ORG_URL}"
      - package: ./dynamic-plugins/dist/backstage-plugin-github-actions
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-github-actions:
                mountPoints:
                  - mountPoint: entity.page.ci/cards
                    importName: EntityGithubActionsContent
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        allOf:
                          - isGithubActionsAvailable
      - package:  ./dynamic-plugins/dist/backstage-plugin-github-issues
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-github-issues:
                mountPoints:
                  - mountPoint: entity.page.issues/cards
                    importName: GithubIssuesCard
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        allOf:
                          - hasAnnotation: github.com/project-slug
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-github-insights
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              roadiehq.backstage-plugin-github-insights:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: EntityGithubInsightsComplianceCard
                    config:
                      layout:
                        gridColumnEnd:
                          lg: "span 4"
                          md: "span 6"
                          xs: "span 12"
                      if:
                        allOf:
                          - isGithubInsightsAvailable
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-github-pull-requests
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              roadiehq.backstage-plugin-github-pull-requests:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: EntityGithubPullRequestsOverviewCard
                    config:
                      layout:
                        gridColumnEnd:
                          lg: "span 4"
                          md: "span 6"
                          xs: "span 12"
                      if:
                        allOf:
                          - isGithubPullRequestsAvailable
                  - mountPoint: entity.page.pull-requests/cards
                    importName: EntityGithubPullRequestsContent
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        allOf:
                          - isGithubPullRequestsAvailable
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-security-insights
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              roadiehq.backstage-plugin-security-insights:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: EntityDependabotAlertsCard
                    config:
                      layout:
                        gridColumnEnd:
                          lg: "span 4"
                          md: "span 6"
                          xs: "span 12"
                      if:
                        allOf:
                          - isSecurityInsightsAvailable
      # Group: Kubernetes
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
        # pluginConfig:
        #   kubernetes:
        #     customResources:
        #       - group: 'tekton.dev'
        #         apiVersion: 'v1beta1'
        #         plural: 'pipelines'
        #       - group: 'tekton.dev'
        #         apiVersion: 'v1beta1'
        #         plural: 'pipelineruns'
        #       - group: 'tekton.dev'
        #         apiVersion: 'v1beta1'
        #         plural: 'taskruns'
        #       - group: 'route.openshift.io'
        #         apiVersion: 'v1'
        #         plural: 'routes'
        #     serviceLocatorMethod:
        #       type: 'multiTenant'
        #     clusterLocatorMethods:
        #       - type: 'config'
        #         clusters:
        #           - name: ${K8S_CLUSTER_NAME}
        #             url: ${K8S_CLUSTER_URL}
        #             authProvider: 'serviceAccount'
        #             skipTLSVerify: true
        #             serviceAccountToken: ${K8S_CLUSTER_TOKEN}
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-kubernetes:
                mountPoints:
                  - mountPoint: entity.page.kubernetes/cards
                    importName: EntityKubernetesContent
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        anyOf:
                          - hasAnnotation: backstage.io/kubernetes-id
                          - hasAnnotation: backstage.io/kubernetes-namespace
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-topology:
                mountPoints:
                  - mountPoint: entity.page.topology/cards
                    importName: TopologyPage
                    config:
                      layout:
                        gridColumn: "1 / -1"
                        height: 75vh
                      if:
                        anyOf:
                          - hasAnnotation: backstage.io/kubernetes-id
                          - hasAnnotation: backstage.io/kubernetes-namespace

      # Group: ArgoCD
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
        disabled: false
        # pluginConfig:
        #   argocd:
        #     username: "${ARGOCD_USERNAME}"
        #     password: "${ARGOCD_PASSWORD}"
        #     appLocatorMethods:
        #       - type: 'config'
        #         instances:
        #           - name: argoInstance1
        #             url: "${ARGOCD_INSTANCE1_URL}"
        #             token: "${ARGOCD_AUTH_TOKEN}"
        #           - name: argoInstance2
        #             url: "${ARGOCD_INSTANCE2_URL}"
        #             token: "${ARGOCD_AUTH_TOKEN2}"
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
        disabled: false
        # pluginConfig:
        #   argocd:
        #     username: "${ARGOCD_USERNAME}"
        #     password: "${ARGOCD_PASSWORD}"
        #     appLocatorMethods:
        #       - type: 'config'
        #         instances:
        #           - name: argoInstance1
        #             url: "${ARGOCD_INSTANCE1_URL}"
        #             token: "${ARGOCD_AUTH_TOKEN}"
        #           - name: argoInstance2
        #             url: "${ARGOCD_INSTANCE2_URL}"
        #             token: "${ARGOCD_AUTH_TOKEN2}"
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              roadiehq.backstage-plugin-argo-cd:
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: EntityArgoCDOverviewCard
                    config:
                      layout:
                        gridColumnEnd:
                          lg: "span 8"
                          xs: "span 12"
                      if:
                        allOf:
                          - isArgocdAvailable
                  - mountPoint: entity.page.cd/cards
                    importName: EntityArgoCDHistoryCard
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        allOf:
                          - isArgocdAvailable
      # Standalone plugins
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-tekton:
                mountPoints:
                  - mountPoint: entity.page.ci/cards
                    importName: TektonCI
                    config:
                      layout:
                        gridColumn: "1 / -1"
                      if:
                        allOf:
                          - isTektonCIAvailable

      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-quay:
                mountPoints:
                  - mountPoint: entity.page.image-registry/cards
                    importName: QuayPage
                    config:
                      layout:
                        gridColumn: 1 / -1
                      if:
                        anyOf:
                        - isQuayAvailable
      - package: ./dynamic-plugins/dist/backstage-plugin-tech-radar
        disabled: false
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage.plugin-tech-radar:
                apiFactories:
                  - importName: TechRadarApi
                appIcons:
                  - name: techRadar
                    importName: TechRadarIcon
                dynamicRoutes:
                  - path: /tech-radar
                    importName: TechRadarPage
                    menuItem:
                      icon: techRadar
                      text: Tech Radar
                    config:
                      props:
                        width: 1500
                        height: 800

route:
  annotations: {}
  enabled: true
  host: '{{ "{{" }} .Values.global.host {{ "}}" }}'
  path: /
  tls:
    caCertificate: ''
    certificate: ''
    destinationCACertificate: ''
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    key: ''
    termination: edge
  wildcardPolicy: None
upstream:
  backstage:
    appConfig:
      app:
        baseUrl: 'https://{{ "{{" }}- include "janus-idp.hostname" . {{ "}}" }}'
      backend:
        baseUrl: 'https://{{ "{{" }}- include "janus-idp.hostname" . {{ "}}" }}'
        cors:
          origin: 'https://{{ "{{" }}- include "janus-idp.hostname" . {{ "}}" }}'
        database:
          connection:
            password: '${POSTGRESQL_ADMIN_PASSWORD}'
            user: postgres
        auth:
          keys:
            - secret: ${BACKEND_SECRET}
    args:
      - '--config'
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml
    command: []
    image:
      pullSecrets:
        - rhdh-pull-secret
      registry: quay.io
      repository: rhdh/rhdh-hub-rhel9
      tag: '{{ rhdh_image_version }}'
    extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{ "{{" }} .Release.Name {{ "}}" }}-postgresql'
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ "{{" }} include "janus-idp.backend-secret-name" $ {{ "}}" }}'
    extraAppConfig:
      - configMapRef: app-config-rhdh
        filename: app-config-rhdh.yaml
    extraEnvVarsSecrets:
      - rhdh-github-plugin-secret
      - rhdh-k8s-plugin-secret
      - rhdh-argocd-plugin-secret
      - rhdh-quay-plugin-secret
    extraVolumes:
      - emptyDir: {}
        name: dynamic-plugins-root
      - configMap:
          defaultMode: 420
          name: dynamic-plugins
          optional: true
        name: dynamic-plugins
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: dynamic-plugins-npmrc

    initContainers:
      - command:
          - python
          - install-dynamic-plugins.py
          - /dynamic-plugins-root
        env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
        image: '{{ "{{" }} include "backstage.image" . {{ "}}" }}'
        imagePullPolicy: Always
        name: install-dynamic-plugins
        volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
        workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    podAnnotations:
      checksum/dynamic-plugins: >-
        {{ "{{" }}- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum {{ "}}" }}
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 2

  ingress:
    enabled: false
    host: '{{ "{{" }} .Values.global.host {{ "}}" }}'
    tls:
      enabled: false
  nameOverride: developer-hub
  networkPolicy:
    enabled: false
  postgresql:
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
    enabled: true
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-15
      tag: latest
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    primary:
      containerSecurityContext:
        enabled: false
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: '{{ "{{" }} .Release.Name {{ "}}" }}-postgresql'
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
        size: 1Gi
      podSecurityContext:
        enabled: false
      securityContext:
        enabled: false
  service:
    externalTrafficPolicy: Cluster
    ports:
      backend: 7007
      name: http-backend
      targetPort: backend
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    automountServiceAccountToken: true
    create: false