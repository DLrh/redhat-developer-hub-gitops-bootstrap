kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
  namespace: "{{ idp_namespace }}"
immutable: false
data:
  app-config-rhdh.yaml: |
    app:
      title : Red Hat Developer Hub
    backend:
      # auth:
      #   keys:
      #   - secret: ${BACKEND_SECRET}
      # baseUrl: "https://rhdh.{{ apps_cluster_domain }}"
      # cors:
      #   credentials: true
      #   methods:
      #   - GET
      #   - POST
      #   - PUT
      #   - DELETE
      #   origin: "https://rhdh.{{ apps_cluster_domain }}"
      csp:
        connect-src:
        - '''self'''
        - 'http:'
        - 'https:'
      # database:
      #   client: pg
      #   connection:
      #     host: ${POSTGRES_HOST}
      #     password: ${POSTGRES_ADMIN_PASSWORD}
      #     port: ${POSTGRES_PORT}
      #     user: ${POSTGRES_USER}
      # listen:
      #   host: 0.0.0.0
      #   port: 7007
      reading:
        allow:
        - host: '*.opentlc.com'
    integrations:
      github:
        - host: "{{ github_host }}"
          #----- 
          # !!! if integrating with a Hosted GitHub Enterprise instance add the following next line !!!
          #apiBaseUrl: https://{{ github_host }}/api/v3
          #----- 
          apps:
            - appId: ${GITHUB_APP_APP_ID} 
              clientId: ${GITHUB_APP_CLIENT_ID} 
              clientSecret: ${GITHUB_APP_CLIENT_SECRET}
              webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
              webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
              privateKey: |
                ${GITHUB_APP_PRIVATE_KEY}

    auth:
      environment: development
      providers:
        github:
          development:
            #-----
            # !!! if integrating with a Hosted GitHub Enterprise instance add the following next line !!!
            #enterpriseInstanceUrl: https://{{ github_host }}
            #-----
            clientId: ${GITHUB_APP_CLIENT_ID}
            clientSecret: ${GITHUB_APP_CLIENT_SECRET}

    catalog:
      providers:
        githubOrg:
          default:
            id: development
            orgUrl: ${GITHUB_ORG_URL}
        github:
          providerId:
            organization: "${GITHUB_ORG}"
            schedule:
              frequency:
                minutes: 10
              timeout: 
                minutes: 2
              initialDelay:
                seconds: 60

    proxy:
      endpoints:  
        /quay/api:
          target: ${QUAY_URL}
          headers:
            X-Requested-With: "XMLHttpRequest"
            Authorization: "Bearer ${QUAY_BEARER_TOKEN}"
          changeOrigin: true
          # Change to "false" in case of using self hosted quay instance with a self-signed certificate
          secure: false
    quay:
      # The UI url for Quay, used to generate the link to Quay
      uiUrl: ${QUAY_URL}
    kubernetes:
      clusterLocatorMethods:
        - clusters:
          - authProvider: serviceAccount
            name: ${K8S_CLUSTER_NAME}
            serviceAccountToken: ${K8S_CLUSTER_TOKEN}
            url: ${K8S_CLUSTER_URL}
            skipTLSVerify: true
          type: config
      customResources:
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'pipelines'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'pipelineruns'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'taskruns'
        #- group: 'org.eclipse.che'
        #  apiVersion: 'v2'
        #  plural: 'checlusters'
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'
      serviceLocatorMethod:
          type: multiTenant

    argocd:
      # use this baseUrl only if you have multiply ArgoCD instances in the same cluster
      #baseUrl: https://openshift-gitops-server-openshift-gitops.apps.yourclusterdomain
      appLocatorMethods:
        - type: 'config'
          instances:
            - name: ${ARGOCD_INSTANCE_NAME}
              url: ${ARGOCD_INSTANCE_URL}
              username: ${ARGOCD_ADMIN_USERNAME}
              password: ${ARGOCD_ADMIN_PASSWORD}

    # ocm:
    #     env:
    #       kubernetesPluginRef: ${K8S_CLUSTER_NAME}
    #       schedule:
    #         # supports cron, ISO duration, "human duration" as used in code
    #         frequency: { seconds: 10 }
    #         # supports ISO duration, "human duration" as used in code
    #         timeout: { seconds: 60 }
    #techdocs:
    #  builder: external
    #  generator:
    #    runIn: local
    #  publisher:
    #    awsS3:
    #      bucketName: ${S3_BUCKET_NAME}
    #      credentials:
    #        accessKeyId: ${S3_ACCESS_KEY}
    #        secretAccessKey: ${S3_SECRET_ACCESS_KEY}
    #      endpoint: ${S3_ENDPOINT_URL}
    #      region: ${S3_REGION}
    #      s3ForcePathStyle: true
    #    type: awsS3
