---
- name: Retrieve Vault init root private token
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "vault-init"
    namespace: "vault"
  register: r_root_token
  retries: 120
  delay: 10
  until:
    - r_root_token is defined
    - r_root_token.resources is defined
    - r_root_token.resources | length > 0
    - r_root_token.resources[0] is defined
    - r_root_token.resources[0].data is defined
    - r_root_token.resources[0].data.root_token is defined
    - r_root_token.resources[0].data.root_token | length > 0

- name: Decode vault init root token
  ansible.builtin.set_fact:
    vault_token: "{{ r_root_token.resources[0].data.root_token | b64decode }}"

- name: Login to vault
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- vault login -tls-skip-verify {{ vault_token }}

# From this guide https://developer.hashicorp.com/vault/docs/auth/kubernetes#use-the-vault-client-s-jwt-as-the-reviewer-jwt
# it is only required if using 'the Vault client's JWT as the reviewer JWT'
- name: Create vault-auth SA resources
  k8s:
    state: present
    definition: "{{ lookup('file', item) | from_yaml }}"
  loop:
    #- vault-auth-service-account.yml
    - vault-cluster-role-binding-role-token-review.yml
    #- vault-auth-secret.yml

- name: Create vault-admin policy
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- bash -c 'rm -rf /tmp/adm-policy.hcl'
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- bash -c 'echo path \"/*\" >> /tmp/adm-policy.hcl'
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- \
    bash -c 'echo {  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"] >> /tmp/adm-policy.hcl'
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- bash -c 'echo } >> /tmp/adm-policy.hcl'
    oc exec vault-0 -c vault -n {{ vault_namespace }} -- bash -c \
    'vault policy write -address https://vault.vault.svc:8200 vault-admin /tmp/adm-policy.hcl'

- name: Enable kubernetes auth for the Dev Cluster
  ansible.builtin.shell: |
    export SA_SECRET_NAME=$(oc get secrets -n vault-admin --output=json \
    | jq -r '.items[].metadata | select(.name|startswith("default-token")).name')
    export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME -n vault-admin \
    --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)
    export SA_CA_CRT=$(oc config view --raw --minify --flatten \
    --output 'jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)
    export K8S_HOST=$(oc config view --raw --minify --flatten \
    --output 'jsonpath={.clusters[].cluster.server}')

    oc exec vault-0 -c vault -n {{ vault_namespace
      }} -- vault auth enable -address https://vault.vault.svc:8200 -path {{ vault_cluster_name }}-admin kubernetes

    oc exec vault-0 -c vault -n {{ vault_namespace
      }} -- vault write -address https://vault.vault.svc:8200 auth/{{ vault_cluster_name }}-admin/config \
    token_reviewer_jwt="$SA_JWT_TOKEN" \
    kubernetes_host="$K8S_HOST" \
    kubernetes_ca_cert="$SA_CA_CRT" \
    issuer="https://kubernetes.default.svc.cluster.local"

- name: Create vault-admin Role for Kubernetes authentication
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n {{ vault_namespace
      }} -- vault write -address https://vault.vault.svc:8200 auth/{{ vault_cluster_name }}-admin/role/vault-admin \
    bound_service_account_names=default \
    bound_service_account_namespaces=vault-admin \
    token_policies=vault-admin \
    ttl=160h

    export SA_SECRET_NAME=$(oc get secrets -n vault-admin --output=json \
    | jq -r '.items[].metadata | select(.name|startswith("default-token")).name')
    export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME -n vault-admin \
    --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)

    #try to login into Vault using the Kubernetes auth endpoint and the default Service Account...
    oc exec vault-0 -c vault -n vault -- \
    vault write -address https://vault.vault.svc:8200 auth/{{ vault_cluster_name }}-admin/login role=vault-admin jwt=$SA_JWT_TOKEN

    #stores the Vault accessor name into a ConfigMap
    accessor=$(oc exec vault-0 -c vault -n vault -- \
    vault read -address https://vault.vault.svc:8200 -format json sys/auth \
    | jq -r '.data["{{ vault_cluster_name }}-admin/"].accessor')

    oc delete configmap kubeauth-accessor -n {{ vault_namespace }} --ignore-not-found=true
    oc create configmap kubeauth-accessor -n {{ vault_namespace }} --from-literal=accessor=${accessor}

- name: Enable kv Secret engine
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n vault -- \
    vault secrets enable -address https://vault.vault.svc:8200 -version=1 -path=kv kv
  ignore_errors: true #in case it's already created

- name: Get GitHub AppId
  ansible.builtin.set_fact:
    github_application_id: "{{ lookup('ansible.builtin.env', 'GITHUB_APP_APP_ID') }}"
    github_org: "{{ lookup('ansible.builtin.env', 'GITHUB_ORG') }}"
    quay_org: "{{ lookup('ansible.builtin.env', 'QUAY_ORG') }}"

- name: Populate Vault with Github Secrets
  # community.hashi_vault.vault_kv2_write:
  community.hashi_vault.vault_write:
    url: "https://vault-vault.{{ apps_cluster_domain }}"
    # engine_mount_point: kv
    path: kv/secrets/{{ idp_instance_name }}/github-plugin
    validate_certs: false
    data:
      app_id: "{{ lookup('ansible.builtin.env', 'GITHUB_APP_APP_ID') }}"
      org: "{{ lookup('ansible.builtin.env', 'GITHUB_ORG') }}"
      # 'key' is required by the vault-config-operator
      key: "{{ lookup('ansible.builtin.file', lookup('ansible.builtin.env', 'GITHUB_APP_PRIVATE_KEY_FILE')) }}"
    token: "{{ vault_token }}"

- name: Populate Vault with Registry Credentials
  # community.hashi_vault.vault_kv2_write:
  community.hashi_vault.vault_write:
    url: "https://vault-vault.{{ apps_cluster_domain }}"
    # engine_mount_point: kv
    path: kv/secrets/{{ idp_instance_name }}/registry-plugin
    validate_certs: false
    data:
      username: "{{ lookup('ansible.builtin.env', 'QUAY_USER') }}"
      password: "{{ lookup('ansible.builtin.env', 'QUAY_TOKEN') }}"
    token: "{{ vault_token }}"

# - name: Create Vault Config Resources
#   k8s:
#     state: present
#     definition: "{{ lookup('template', item) | from_yaml }}"
#   loop:
#     - vault-github-secret-engine-config.yml.j2
#     - vault-quay-secret-engine-config.yml.j2
#     - vault-github-secret-engine-role.yml.j2
#     - vault-quay-secret-engine-role.yml.j2
#     - vault-git-webhook-password-policy.yml.j2
