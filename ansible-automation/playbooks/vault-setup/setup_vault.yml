---
- name: Retrieve Vault init root private token
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "vault-init"
    namespace: "vault"
  register: r_root_token
  retries: 120
  delay: 10
  until:
    - r_root_token is defined
    - r_root_token.resources is defined
    - r_root_token.resources | length > 0
    - r_root_token.resources[0] is defined
    - r_root_token.resources[0].data is defined
    - r_root_token.resources[0].data.root_token is defined
    - r_root_token.resources[0].data.root_token | length > 0

- name: Decode vault init root token
  ansible.builtin.set_fact:
    vault_token: "{{ r_root_token.resources[0].data.root_token | b64decode }}"

- name: Login to vault
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n {{ vault_namespace
      }} -- vault login -tls-skip-verify {{ vault_token }}

# Do I need this???
# From this guide https://developer.hashicorp.com/vault/docs/auth/kubernetes#use-the-vault-client-s-jwt-as-the-reviewer-jwt
# it is only required if using 'the Vault client's JWT as the reviewer JWT'
# - name: Create vault auth resources
#   k8s:
#     state: present
#     definition: "{{ lookup('file', item) | from_yaml }}"
#   loop:
#     - vault-service-account.yml
#     - vault-cluster-role-binding-role-token-review.yml
#     - vault-auth-secret.yml
#
#####
# this is already being done during Vault initialization though Helm Chart (values.extraContainers)
#####
# - name: Create vault policy
#   ansible.builtin.shell: |
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- bash -c 'rm -rf /tmp/rhdh-policy.hcl'
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- bash -c 'echo path \"*\" >> /tmp/rhdh-policy.hcl'
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- bash -c 'echo {  capabilities = [\"read\", \"list\"] >> /tmp/rhdh-policy.hcl'
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- bash -c 'echo } >> /tmp/rhdh-policy.hcl'
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- bash -c 'vault policy write -address https://vault.vault.svc:8200 rhdh-policy /tmp/rhdh-policy.hcl'

# - name: Enable kubernetes auth
#   ansible.builtin.shell: |
#     export SA_SECRET_NAME=$(oc get secrets -n vault-admin --output=json \
#     | jq -r '.items[].metadata | select(.name|startswith("vault-auth-secret")).name')
#     export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME -n vault-admin \
#     --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)
#     export SA_CA_CRT=$(oc config view --raw --minify --flatten \
#     --output 'jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)
#     export K8S_HOST=$(oc config view --raw --minify --flatten \
#     --output 'jsonpath={.clusters[].cluster.server}')
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- vault auth enable -address https://vault.vault.svc:8200 kubernetes
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- vault write -address https://vault.vault.svc:8200 auth/kubernetes/config \
#     token_reviewer_jwt="$SA_JWT_TOKEN" \
#     kubernetes_host="$K8S_HOST" \
#     kubernetes_ca_cert="$SA_CA_CRT" \
#     issuer="https://kubernetes.default.svc.cluster.local"

# - name: Create role and service account authentication
#   ansible.builtin.shell: |
#     oc exec vault-0 -c vault -n {{ vault_namespace
#       }} -- vault write -address https://vault.vault.svc:8200 auth/kubernetes/role/rhdh-role \
#     bound_service_account_names=vault-auth \
#     bound_service_account_namespaces=vault-admin \
#     token_policies=rhdh-policy \
#     ttl=160h
#     export SA_SECRET_NAME=$(oc get secrets -n vault-admin --output=json \
#     | jq -r '.items[].metadata | select(.name|startswith("vault-auth-secret")).name')
#     export SA_JWT_TOKEN=$(oc get secret $SA_SECRET_NAME -n vault-admin \
#     --output 'go-template={{ "{{" }} .data.token {{ "}}" }}' | base64 --decode)
#     oc exec vault-0 -c vault -n vault -- vault write -address https://vault.vault.svc:8200 auth/kubernetes/login role=rhdh-role jwt=$SA_JWT_TOKEN

# enable vault-plugin-secrets-github
# vault secrets enable -path=github -plugin-name=vault-plugin-secrets-github plugin
# Write the configuration
# vault write /github/config app_id=<app_id> prv_key=@<private_key_file>

# enable vault-plugin-secrets-quay
# vault secrets enable -path=quay -plugin-name=vault-plugin-secrets-quay plugin
# Write the configuration
# vault write quay/config \
#  url=https://quay.io \
#  token= #Quay OAuth App token (with 'Administer Organization' grant!!!)

- name: Enable Secret engines for kv, github and quay
  ansible.builtin.shell: |
    oc exec vault-0 -c vault -n vault -- vault secrets enable -address https://vault.vault.svc:8200 -version=1 -path=kv kv
    # oc exec vault-0 -c vault -n vault -- vault secrets enable -address https://vault.vault.svc:8200 -path=github vault-plugin-secrets-github
    # oc exec vault-0 -c vault -n vault -- vault secrets enable -address https://vault.vault.svc:8200 -path=quay vault-plugin-secrets-quay
  ignore_errors: true #in case it already created

# - name: Create Vault Secret Engines
#   k8s:
#     state: present
#     definition: "{{ lookup('file', item) | from_yaml }}"
#   loop:
#     - vault-git-secret-engine-mount.yml
#     - vault-kv-secret-engine-mount.yml
#     - vault-quay-secret-engine-mount.yml

# Not needed yet for this demo
# - name: Populate Vault with Dev Spaces Secrets
#   community.hashi_vault.vault_write:
#     url: "https://vault-vault.{{ apps_cluster_domain }}"
#     path: kv/secrets/{{ idp_instance_name }}/dev-spaces
#     validate_certs: false
#     data:
#       id: "{{ lookup('ansible.builtin.env', 'GITHUB_DEV_SPACES_CLIENT_ID') }}"
#       secret: "{{ lookup('ansible.builtin.env', 'GITHUB_DEV_SPACES_CLIENT_SECRET') }}"
#     token: "{{ vault_token }}"
#   register: vault_status

- name: Get GitHub AppId
  ansible.builtin.set_fact:
    github_application_id: "{{ lookup('ansible.builtin.env', 'GITHUB_APP_APP_ID') }}"
    github_org: "{{ lookup('ansible.builtin.env', 'GITHUB_ORG') }}"
    quay_org: "{{ lookup('ansible.builtin.env', 'QUAY_ORG') }}"

- name: Populate Vault with Github Secrets
  # community.hashi_vault.vault_kv2_write:
  community.hashi_vault.vault_write:
    url: "https://vault-vault.{{ apps_cluster_domain }}"
    # engine_mount_point: kv
    path: kv/secrets/{{ idp_instance_name }}/github-plugin
    validate_certs: false
    data:
      app_id: "{{ lookup('ansible.builtin.env', 'GITHUB_APP_APP_ID') }}"
      org: "{{ lookup('ansible.builtin.env', 'GITHUB_ORGANIZATION') }}"
      # 'key' is required by the vault-config-operator
      key: "{{ lookup('ansible.builtin.file', lookup('ansible.builtin.env', 'GITHUB_APP_PRIVATE_KEY_FILE')) }}"
      # private_key: "{{ lookup('ansible.builtin.file', lookup('ansible.builtin.env', 'GITHUB_KEY_FILE')) }}"
    token: "{{ vault_token }}"

# - name: Concatenate Registry Credentials
#   ansible.builtin.set_fact:
#     registry_credentials: "{{ lookup('ansible.builtin.env', 'QUAY_USER') }}:{{ lookup('ansible.builtin.env', 'QUAY_TOKEN') }}"

# - name: Encode Registry Credentials
#   ansible.builtin.set_fact:
#     encoded_registry_credentials: "{{ registry_credentials | b64encode }}"

- name: Populate Vault with Registry Credentials
  # community.hashi_vault.vault_kv2_write:
  community.hashi_vault.vault_write:
    url: "https://vault-vault.{{ apps_cluster_domain }}"
    # engine_mount_point: kv
    path: kv/secrets/{{ idp_instance_name }}/registry-plugin
    validate_certs: false
    data:
      # credentials: "{{ encoded_registry_credentials }}"
      username: "{{ lookup('ansible.builtin.env', 'QUAY_USER') }}"
      password: "{{ lookup('ansible.builtin.env', 'QUAY_TOKEN') }}"
    token: "{{ vault_token }}"

# - name: Create Vault Config Resources
#   k8s:
#     state: present
#     definition: "{{ lookup('template', item) | from_yaml }}"
#   loop:
#     - vault-github-secret-engine-config.yml.j2
#     - vault-quay-secret-engine-config.yml.j2
#     - vault-github-secret-engine-role.yml.j2
#     - vault-quay-secret-engine-role.yml.j2
#     - vault-git-webhook-password-policy.yml.j2
